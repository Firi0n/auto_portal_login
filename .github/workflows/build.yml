name: Build PyInstaller Executables

on:
  push:
    tags:
      - "v*" # Trigger on tag pushes like v1.0.0
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag name for the release (e.g. v1.0.0)"
        required: true
        default: "v1.0.0"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest] # Build matrix for Linux, Windows, and macOS

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3 # Checkout the repository code

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10" # Set up Python 3.10 environment

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Install Python dependencies from requirements.txt
          pip install pyinstaller          # Install PyInstaller to build executables

      - name: Install Playwright browsers
        run: |
          python -m playwright install --with-deps  # Download and install Playwright browsers with dependencies

      - name: Build executable (onedir)
        run: |
          pyinstaller --onedir --collect-all playwright login.py  # Build executable as folder including Playwright files

      - name: Rename dist folder for ${{ matrix.os }}
        shell: bash
        run: |
          # Rename the output folder depending on OS for clarity
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            mv dist/login dist/login-windows
          elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            mv dist/login dist/login-linux
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            mv dist/login dist/login-macos
          fi

      - name: Create zip archive
        shell: bash
        run: |
          cd dist
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            powershell Compress-Archive -Path login-windows\* -DestinationPath login-windows.zip
          else
            zip -r login-${{ matrix.os }}.zip login-${{ matrix.os }}
          fi

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
        with:
          files: dist/login-*.zip # Upload all zip files created for different OSes
          tag_name: ${{ github.event_name == 'push' && github.ref_name || (github.event_name == 'workflow_dispatch' && github.event.inputs.tag) }} # Use tag from push or manual input
          token: ${{ secrets.GITHUB_TOKEN }} # GitHub token to authorize the release upload
